From 6d42d8681c8d8f29d7d2a1f96d0cea106b6939e7 Mon Sep 17 00:00:00 2001
From: Huaxiang Sun <hsun@cloudera.com>
Date: Fri, 7 Oct 2016 15:47:06 -0700
Subject: [PATCH 202/219] HBASE-16767 Mob compaction needs to clean up files
 in /hbase/mobdir/.tmp and
 /hbase/mobdir/.tmp/.bulkload when running into IO
 exceptions

Reason: Bug
Ref: CDH-45696
Author: Huaxiang Sun

Change-Id: I3c0ec9362c1475edebf73b701bfea5dce7613d6b
Signed-off-by: Jonathan M Hsieh <jmhsieh@apache.org>
---
 .../PartitionedMobFileCompactor.java               |  141 ++++++++++++--------
 .../TestPartitionedMobFileCompactor.java           |   91 ++++++++++++-
 2 files changed, 170 insertions(+), 62 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
index be7cca1..66e5969 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
@@ -372,65 +372,93 @@ public class PartitionedMobFileCompactor extends MobFileCompactor {
     Writer writer = null;
     Writer refFileWriter = null;
     Path filePath = null;
-    Path refFilePath = null;
     long mobCells = 0;
-    try {
-      writer = MobUtils.createWriter(conf, fs, column, partition.getPartitionId().getDate(),
-        tempPath, Long.MAX_VALUE, column.getCompactionCompression(), partition.getPartitionId()
-          .getStartKey(), compactionCacheConfig);
-      filePath = writer.getPath();
-      byte[] fileName = Bytes.toBytes(filePath.getName());
-      // create a temp file and open a writer for it in the bulkloadPath
-      refFileWriter = MobUtils.createRefFileWriter(conf, fs, column, bulkloadColumnPath, fileInfo
-        .getSecond().longValue(), compactionCacheConfig);
-      refFilePath = refFileWriter.getPath();
-      List<Cell> cells = new ArrayList<Cell>();
-      boolean hasMore = false;
+    boolean cleanupTmpMobFile = false;
+    boolean cleanupBulkloadDirOfPartition = false;
+    boolean cleanupCommittedMobFile = false;
+    boolean closeReaders= true;
 
-      ScannerContext scannerContext =
+    try {
+      try {
+        writer = MobUtils.createWriter(conf, fs, column, partition.getPartitionId().getDate(),
+            tempPath, Long.MAX_VALUE, column.getCompactionCompression(), partition.getPartitionId()
+                .getStartKey(), compactionCacheConfig);
+        cleanupTmpMobFile = true;
+        filePath = writer.getPath();
+        byte[] fileName = Bytes.toBytes(filePath.getName());
+        // create a temp file and open a writer for it in the bulkloadPath
+        refFileWriter = MobUtils.createRefFileWriter(conf, fs, column, bulkloadColumnPath, fileInfo
+          .getSecond().longValue(), compactionCacheConfig);
+        cleanupBulkloadDirOfPartition = true;
+        List<Cell> cells = new ArrayList<Cell>();
+        boolean hasMore = false;
+        ScannerContext scannerContext =
           ScannerContext.newBuilder().setBatchLimit(compactionKVMax).build();
-      do {
-        hasMore = scanner.next(cells, scannerContext);
-        for (Cell cell : cells) {
-          // TODO remove this after the new code are introduced.
-          KeyValue kv = KeyValueUtil.ensureKeyValue(cell);
-          // write the mob cell to the mob file.
-          writer.append(kv);
-          // write the new reference cell to the store file.
-          KeyValue reference = MobUtils.createMobRefKeyValue(kv, fileName, tableNameTag);
-          refFileWriter.append(reference);
-          mobCells++;
+        do {
+          hasMore = scanner.next(cells, scannerContext);
+          for (Cell cell : cells) {
+            // TODO remove this after the new code are introduced.
+            KeyValue kv = KeyValueUtil.ensureKeyValue(cell);
+            // write the mob cell to the mob file.
+            writer.append(kv);
+            // write the new reference cell to the store file.
+            KeyValue reference = MobUtils.createMobRefKeyValue(kv, fileName, tableNameTag);
+            refFileWriter.append(reference);
+            mobCells++;
+          }
+          cells.clear();
+        } while (hasMore);
+      } finally {
+        // close the scanner.
+        scanner.close();
+
+        if (cleanupTmpMobFile) {
+          // append metadata to the mob file, and close the mob file writer.
+          closeMobFileWriter(writer, fileInfo.getFirst(), mobCells);
         }
-        cells.clear();
-      } while (hasMore);
+
+        if (cleanupBulkloadDirOfPartition) {
+          // append metadata and bulkload info to the ref mob file, and close the writer.
+          closeRefFileWriter(refFileWriter, fileInfo.getFirst(), request.selectionTime);
+        }
+      }
+
+      if (mobCells > 0) {
+        // commit mob file
+        MobUtils.commitFile(conf, fs, filePath, mobFamilyDir, compactionCacheConfig);
+        cleanupTmpMobFile = false;
+        cleanupCommittedMobFile = true;
+        // bulkload the ref file
+        bulkloadRefFile(table, bulkloadPathOfPartition, filePath.getName());
+        cleanupCommittedMobFile = false;
+        newFiles.add(new Path(mobFamilyDir, filePath.getName()));
+      }
+
+      // archive the old mob files, do not archive the del files.
+      try {
+        closeStoreFileReaders(mobFilesToCompact);
+        closeReaders = false;
+        MobUtils.removeMobFiles(conf, fs, tableName, mobTableDir, column.getName(), mobFilesToCompact);
+      } catch (IOException e) {
+        LOG.error("Failed to archive the files " + mobFilesToCompact, e);
+      }
     } finally {
-      // close the scanner.
-      scanner.close();
-      // append metadata to the mob file, and close the mob file writer.
-      closeMobFileWriter(writer, fileInfo.getFirst(), mobCells);
-      // append metadata and bulkload info to the ref mob file, and close the writer.
-      closeRefFileWriter(refFileWriter, fileInfo.getFirst(), request.selectionTime);
-    }
-    if (mobCells > 0) {
-      // commit mob file
-      MobUtils.commitFile(conf, fs, filePath, mobFamilyDir, compactionCacheConfig);
-      // bulkload the ref file
-      bulkloadRefFile(table, bulkloadPathOfPartition, filePath.getName());
-      newFiles.add(new Path(mobFamilyDir, filePath.getName()));
-    } else {
-      // remove the new files
-      // the mob file is empty, delete it instead of committing.
-      deletePath(filePath);
-      // the ref file is empty, delete it instead of committing.
-      deletePath(refFilePath);
-    }
-    // archive the old mob files, do not archive the del files.
-    try {
-      closeStoreFileReaders(mobFilesToCompact);
-      MobUtils
-        .removeMobFiles(conf, fs, tableName, mobTableDir, column.getName(), mobFilesToCompact);
-    } catch (IOException e) {
-      LOG.error("Failed to archive the files " + mobFilesToCompact, e);
+      if (closeReaders) {
+        closeStoreFileReaders(mobFilesToCompact);
+      }
+
+      if (cleanupTmpMobFile) {
+        deletePath(filePath);
+      }
+
+      if (cleanupBulkloadDirOfPartition) {
+        // delete the bulkload files in bulkloadPath
+        deletePath(bulkloadPathOfPartition);
+      }
+
+      if (cleanupCommittedMobFile) {
+        deletePath(new Path(mobFamilyDir, filePath.getName()));
+      }
     }
   }
 
@@ -561,12 +589,7 @@ public class PartitionedMobFileCompactor extends MobFileCompactor {
       LoadIncrementalHFiles bulkload = new LoadIncrementalHFiles(conf);
       bulkload.doBulkLoad(bulkloadDirectory, table);
     } catch (Exception e) {
-      // delete the committed mob file
-      deletePath(new Path(mobFamilyDir, fileName));
       throw new IOException(e);
-    } finally {
-      // delete the bulkload files in bulkloadPath
-      deletePath(bulkloadDirectory);
     }
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
index 4a063e8..4725640 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
@@ -64,8 +64,10 @@ import org.apache.hadoop.hbase.regionserver.StoreScanner;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.Threads;
+import org.apache.hadoop.hdfs.DistributedFileSystem;
 import org.junit.AfterClass;
 import org.junit.Assert;
+import static org.junit.Assert.assertTrue;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -92,6 +94,9 @@ public class TestPartitionedMobFileCompactor {
     TEST_UTIL.getConfiguration().setInt("hbase.master.info.port", 0);
     TEST_UTIL.getConfiguration().setBoolean("hbase.regionserver.info.port.auto", true);
     TEST_UTIL.getConfiguration().setInt("hfile.format.version", 3);
+    // Inject our customized DistributedFileSystem
+    TEST_UTIL.getConfiguration().setClass("fs.hdfs.impl", FaultyDistributedFileSystem.class,
+        DistributedFileSystem.class);
     TEST_UTIL.startMiniCluster(1);
     pool = createThreadPool(TEST_UTIL.getConfiguration());
   }
@@ -229,6 +234,50 @@ public class TestPartitionedMobFileCompactor {
     testCompactDelFiles(tableName, 4, 13, false);
   }
 
+  @Test
+  public void testCompactFilesWithDstDirFull() throws Exception {
+    String tableName = "testCompactFilesWithDstDirFull";
+    fs = FileSystem.get(conf);
+    FaultyDistributedFileSystem faultyFs = (FaultyDistributedFileSystem)fs;
+    Path testDir = FSUtils.getRootDir(conf);
+    Path mobTestDir = new Path(testDir, MobConstants.MOB_DIR_NAME);
+    basePath = new Path(new Path(mobTestDir, tableName), family);
+
+    try {
+      int count = 2;
+      // create 2 mob files.
+      createStoreFiles(basePath, family, qf, count, Type.Put, true);
+      listFiles();
+
+      TableName tName = TableName.valueOf(tableName);
+      MobFileCompactor compactor = new PartitionedMobFileCompactor(conf, faultyFs, tName, hcd, pool);
+      faultyFs.setThrowException(true);
+      try {
+        compactor.compact(allFiles, true);
+      } catch (IOException e) {
+        System.out.println("Expected exception, ignore");
+      }
+
+      // Verify that all the files in tmp directory are cleaned up
+      Path tempPath = new Path(MobUtils.getMobHome(conf), MobConstants.TEMP_DIR_NAME);
+      FileStatus[] ls = faultyFs.listStatus(tempPath);
+
+      // Only .bulkload under this directory
+      assertTrue(ls.length == 1);
+      assertTrue(MobConstants.BULKLOAD_DIR_NAME.equalsIgnoreCase(ls[0].getPath().getName()));
+
+      Path bulkloadPath = new Path(tempPath, new Path(MobConstants.BULKLOAD_DIR_NAME, new Path(
+          tName.getNamespaceAsString(), tName.getQualifierAsString())));
+
+      // Nothing in bulkLoad directory
+      FileStatus[] lsBulkload = faultyFs.listStatus(bulkloadPath);
+      assertTrue(lsBulkload.length == 0);
+
+    } finally {
+      faultyFs.setThrowException(false);
+    }
+  }
+
   /**
    * Tests the selectFiles
    * @param tableName the table name
@@ -339,17 +388,30 @@ public class TestPartitionedMobFileCompactor {
    */
   private void createStoreFiles(Path basePath, String family, String qualifier, int count,
       Type type) throws IOException {
+    createStoreFiles(basePath, family, qualifier, count, type, false);
+  }
+
+  private void createStoreFiles(Path basePath, String family, String qualifier, int count,
+      Type type, boolean sameStartKey) throws IOException {
     HFileContext meta = new HFileContextBuilder().withBlockSize(8 * 1024).build();
     String startKey = "row_";
     MobFileName mobFileName = null;
     for (int i = 0; i < count; i++) {
-      byte[] startRow = Bytes.toBytes(startKey + i) ;
+      byte[] startRow;
+      if (sameStartKey) {
+        // When creating multiple files under one partition, suffix needs to be different.
+        startRow = Bytes.toBytes(startKey);
+        mobSuffix = UUID.randomUUID().toString().replaceAll("-", "");
+        delSuffix = UUID.randomUUID().toString().replaceAll("-", "") + "_del";
+      } else {
+        startRow = Bytes.toBytes(startKey + i);
+      }
       if(type.equals(Type.Delete)) {
         mobFileName = MobFileName.create(startRow, MobUtils.formatDate(
             new Date()), delSuffix);
       }
       if(type.equals(Type.Put)){
-        mobFileName = MobFileName.create(Bytes.toBytes(startKey + i), MobUtils.formatDate(
+        mobFileName = MobFileName.create(startRow, MobUtils.formatDate(
             new Date()), mobSuffix);
       }
       StoreFile.Writer mobFileWriter = new StoreFile.WriterBuilder(conf, cacheConf, fs)
@@ -443,4 +505,27 @@ public class TestPartitionedMobFileCompactor {
     conf.setInt(MobConstants.MOB_FILE_COMPACTION_BATCH_SIZE,
       MobConstants.DEFAULT_MOB_FILE_COMPACTION_BATCH_SIZE);
   }
-}
\ No newline at end of file
+
+  /**
+   * The customized Distributed File System Implementation
+   */
+  static class FaultyDistributedFileSystem extends DistributedFileSystem {
+    private volatile boolean throwException = false;
+
+    public FaultyDistributedFileSystem() {
+      super();
+    }
+
+    public void setThrowException(boolean throwException) {
+      this.throwException = throwException;
+    }
+
+    @Override
+    public boolean rename(Path src, Path dst) throws IOException {
+      if (throwException) {
+        throw new IOException("No more files allowed");
+      }
+      return super.rename(src, dst);
+    }
+  }
+}
-- 
1.7.9.5

